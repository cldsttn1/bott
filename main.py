import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from flask import Flask
from threading import Thread
from keep_alive import keep_alive  # –ü–æ–¥–∫–ª—é—á–∞–µ–º keep_alive.py

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏)
logging.basicConfig(level=logging.INFO)

# üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Replit Secrets)
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞! BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ 'Secrets' Replit.")

print(f"üîë BOT_TOKEN: {TOKEN[:10]}...")  # –í—ã–≤–µ–¥–µ—Ç —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# üîπ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å MemoryStorage
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üîπ Flask-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è 24/7 —Ä–∞–±–æ—Ç—ã)
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!"

# üîπ –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
user_data = {}  # –ö—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
recipient_data = {}  # –ö–æ–º—É –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å **ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è**, **–ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ** –∏–ª–∏ **–Ω–∞–ø–∏—à–∏ @username**, –∏ —è –ø–µ—Ä–µ–¥–∞–º –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ username
async def get_user_id_by_username(username: str):
    try:
        user = await bot.get_chat(username)
        return user.id
    except Exception:
        return None

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_anonymous_message(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.forward_from:
        recipient_id = message.forward_from.id
        user_data[user_id] = recipient_id
        await message.answer(f"‚úÖ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω: `{recipient_id}`\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª ID –≤—Ä—É—á–Ω—É—é
    if message.text and message.text.isdigit():
        recipient_id = int(message.text)
        user_data[user_id] = recipient_id
        await message.answer(f"‚úÖ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{recipient_id}`\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª username
    if message.text and message.text.startswith("@"):
        username = message.text.strip("@")
        recipient_id = await get_user_id_by_username(username)
        if recipient_id:
            user_data[user_id] = recipient_id
            await message.answer(f"‚úÖ ID –¥–ª—è @{username} –Ω–∞–π–¥–µ–Ω: `{recipient_id}`\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –∑–∞–∫—Ä—ã—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–∏ ID
    recipient_id = user_data.get(user_id)
    if not recipient_id:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å ID, @username –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data=f"reply_{user_id}")]]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if message.text:
            await bot.send_message(recipient_id, f"üì© –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}", reply_markup=keyboard)

        elif message.photo:
            await bot.send_photo(recipient_id, message.photo[-1].file_id, caption="üì∑ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Ñ–æ—Ç–æ", reply_markup=keyboard)

        elif message.video:
            await bot.send_video(recipient_id, message.video.file_id, caption="üé• –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≤–∏–¥–µ–æ", reply_markup=keyboard)

        elif message.document:
            await bot.send_document(recipient_id, message.document.file_id, caption="üìÑ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", reply_markup=keyboard)

        elif message.voice:
            await bot.send_voice(recipient_id, message.voice.file_id, caption="üéôÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ", reply_markup=keyboard)

        elif message.audio:
            await bot.send_audio(recipient_id, message.audio.file_id, caption="üéµ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –∞—É–¥–∏–æ", reply_markup=keyboard)

        else:
            await message.answer("‚ùå –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")
        recipient_data[recipient_id] = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}\n–í–æ–∑–º–æ–∂–Ω–æ, —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ"
@dp.callback_query()
async def reply_anonymously(callback: CallbackQuery):
    recipient_id = callback.from_user.id
    sender_id = recipient_data.get(recipient_id)

    if not sender_id:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
        return

    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–∞–∫ "–æ—Ç–≤–µ—Ç—á–∏–∫–∞"
    user_data[recipient_id] = sender_id

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

# üîπ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Flask-—Å–µ—Ä–≤–µ—Ä–∞
def run_flask():
    app.run(host="0.0.0.0", port=8080)

if __name__ == "__main__":
    Thread(target=run_flask).start()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    keep_alive()  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã 24/7
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

